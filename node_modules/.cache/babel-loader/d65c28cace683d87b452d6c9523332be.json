{"ast":null,"code":"export const focusHandling = (prop = null) => {\n  // make focus ring visible only for keyboard navigation\n  const focusEls = document.querySelectorAll('a, button, input, select, textarea, .form-switch');\n\n  const resetFocusEls = bool => {\n    const outlineStyle = bool ? '' : 'none';\n    focusEls.forEach(focusTab => {\n      (!prop || prop === 'outline') && focusTab.style.setProperty('outline', outlineStyle);\n      (!prop || prop === 'box-shadow') && focusTab.style.setProperty('box-shadow', outlineStyle);\n    });\n  };\n\n  const detectClick = () => {\n    if (focusEls.length > 0) {\n      resetFocusEls(false); // eslint-disable-next-line no-use-before-define\n\n      window.addEventListener('keydown', detectTab);\n    }\n\n    window.removeEventListener('mousedown', detectClick);\n  };\n\n  const detectTab = event => {\n    if (event.keyCode !== 9) return;\n    resetFocusEls(true);\n    window.removeEventListener('keydown', detectTab);\n    window.addEventListener('mousedown', detectClick);\n  };\n\n  window.addEventListener('mousedown', detectClick);\n};","map":{"version":3,"sources":["/Users/juanmatus/Desktop/open-pro-react/node_modules/cruip-js-toolkit/focus-handling.js"],"names":["focusHandling","prop","focusEls","document","querySelectorAll","resetFocusEls","bool","outlineStyle","forEach","focusTab","style","setProperty","detectClick","length","window","addEventListener","detectTab","removeEventListener","event","keyCode"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,IAAI,GAAG,IAAR,KAAiB;AAC5C;AACA,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,kDAA1B,CAAjB;;AAEA,QAAMC,aAAa,GAAIC,IAAD,IAAU;AAC9B,UAAMC,YAAY,GAAGD,IAAI,GAAG,EAAH,GAAQ,MAAjC;AACAJ,IAAAA,QAAQ,CAACM,OAAT,CAAkBC,QAAD,IAAc;AAC7B,OAAC,CAACR,IAAD,IAASA,IAAI,KAAK,SAAnB,KAAiCQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2B,SAA3B,EAAsCJ,YAAtC,CAAjC;AACA,OAAC,CAACN,IAAD,IAASA,IAAI,KAAK,YAAnB,KAAoCQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2B,YAA3B,EAAyCJ,YAAzC,CAApC;AACD,KAHD;AAID,GAND;;AAQA,QAAMK,WAAW,GAAG,MAAM;AACxB,QAAIV,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACvBR,MAAAA,aAAa,CAAC,KAAD,CAAb,CADuB,CAEvB;;AACAS,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,SAAnC;AACD;;AACDF,IAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwCL,WAAxC;AACD,GAPD;;AASA,QAAMI,SAAS,GAAIE,KAAD,IAAW;AAC3B,QAAIA,KAAK,CAACC,OAAN,KAAkB,CAAtB,EAAyB;AACzBd,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAS,IAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,SAAtC;AACAF,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCH,WAArC;AACD,GALD;;AAOAE,EAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCH,WAArC;AACD,CA7BM","sourcesContent":["export const focusHandling = (prop = null) => {\n  // make focus ring visible only for keyboard navigation\n  const focusEls = document.querySelectorAll('a, button, input, select, textarea, .form-switch');\n\n  const resetFocusEls = (bool) => {\n    const outlineStyle = bool ? '' : 'none';\n    focusEls.forEach((focusTab) => {\n      (!prop || prop === 'outline') && focusTab.style.setProperty('outline', outlineStyle);\n      (!prop || prop === 'box-shadow') && focusTab.style.setProperty('box-shadow', outlineStyle);\n    });\n  };\n\n  const detectClick = () => {\n    if (focusEls.length > 0) {\n      resetFocusEls(false);\n      // eslint-disable-next-line no-use-before-define\n      window.addEventListener('keydown', detectTab);\n    }\n    window.removeEventListener('mousedown', detectClick);\n  };\n\n  const detectTab = (event) => {\n    if (event.keyCode !== 9) return;\n    resetFocusEls(true);\n    window.removeEventListener('keydown', detectTab);\n    window.addEventListener('mousedown', detectClick);\n  };\n\n  window.addEventListener('mousedown', detectClick);\n}"]},"metadata":{},"sourceType":"module"}